datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// ########################### ACOUNT ################################################# 

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  username       String?   @unique
  wallet_address String?   @unique
  emailVerified  DateTime?
  image          String?
  isAuditor      Boolean   @default(false)
  isAdmin        Boolean   @default(false)

  accounts       Account[]
  adminProfile   AdminProfile?
  auditorProfile AuditorProfile?
  auditHistory   AuditHistory[]

  challenges Challenge[]
}

model AdminProfile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model AuditorProfile {
  id               Int     @id @default(autoincrement())
  skillsExpertise  String?
  certification    String?
  rating           Float?
  audit_history_id String?

  audit_history    AuditHistory[]
  contest_activity Activity[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model AuditHistory {
  id Int @id @default(autoincrement())

  client   User   @relation(fields: [clientId], references: [id])
  clientId String

  auditorProfile     AuditorProfile @relation(fields: [auditor_Profile_Id], references: [id])
  auditor_Profile_Id Int

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  status      ProjectStatus
  createdAt   DateTime      @default(now())

  auditHistory AuditHistory[]
}

// ########################### DISPUTES ################################################# 

model Disputes {
  id               Int           @id @default(autoincrement())
  Status           DisputeStatus
  who_won          String[]
  reason           String
  createdAt        DateTime      @default(now())
  endTime          DateTime?
  isAuditorConnect Boolean       @default(false)
  message_id       String?

  hack_me    Challenge_Hack_Me @relation(fields: [hack_me_id], references: [id])
  hack_me_id Int               @unique
}

// ########################### CHALLENGE ################################################# 

model Challenge {
  id                    Int             @id @default(autoincrement())
  title                 String
  description           String
  no_of_participants    Int?
  winner_wallet_address String?
  status                Status
  difficulty_level      DifficultyLevel
  tags                  String[]
  createdAt             DateTime        @default(now())
  codebase              String
  start_time            DateTime?
  end_time              DateTime?
  duration              Int
  amount                Int
  challengeType         String
  chain                 String
  // contactAddress        String?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  hack_me      Challenge_Hack_Me?
  hack_or_fund Challenge_Hack_or_Fund?
}

model Challenge_Hack_Me {
  id  Int     @id @default(autoincrement())
  tip String?

  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  challenge_id Int       @unique

  disputes Disputes?
}

model Challenge_Hack_or_Fund {
  id                       Int @id @default(autoincrement())
  won_amount               Int
  number_of_sponsors       Int
  total_earned_of_sponsors Int
  total_amount_lost        Int

  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  challenge_id Int       @unique
}

// ########################### CHALLENGE ################################################# 

model Contest {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  status      ContestStatus
  codebase    String
  createdAt   DateTime      @default(now())

  activity      Activity?
  vulnerability Vulnerability[]
}

model Vulnerability {
  id            Int      @id @default(autoincrement())
  title         String
  bug_detail    String?
  solution_code String
  severity      String
  tags          String[]
  createdAt     DateTime @default(now())

  contest    Contest @relation(fields: [contest_id], references: [id])
  contest_id Int
}

model Activity {
  id                  Int    @id @default(autoincrement())
  total_sponsors_won  Int
  amount_auditor_earn Int
  reputations         String
  winner_Id           Int

  auditors    AuditorProfile @relation(fields: [auditors_id], references: [id])
  auditors_id Int

  contest    Contest @relation(fields: [contest_id], references: [id])
  contest_id Int     @unique
}

/////////////////////////////// ENUM////////////////////////////

enum Status {
  ACTIVE
  ONGOING
  ONQUEUE
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
  INSANE
}

enum ContestStatus {
  ACTIVE
  COMPLETED
  NULL
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  DISPUTE_OPENED
  DELIVERED
}

enum DisputeStatus {
  OPENED
  CLOSED
}
